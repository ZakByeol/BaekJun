다이나믹 알고리즘, 동적 계획법 ( Dynamic Programming )

문제를 작은 부분 문제로 나누어, 해당 작은 문제의 최적해로 큰 문제의 해를 구하는 알고리즘
주로 상향식 접근 방식을 가진다.

👉 최적의 사용 예시

    1. 중복되는 부분문제가 존재할 때

    2. 부분 문제의 해를 활용 가능할 때

👉 하향식으로 풀 경우

재귀함수를 사용하여 문제를 작은 문제들로 쪼개고, 계산 결과를 저장하는 메모리 기법, 메모이제이션 ( Memoization )을 사용하여 저장함.
Memoization은 캐싱을 통해 이전 계산 결과를 저장하여 중복 계산을 피하는 것을 의미한다.

int fiboData[100] = {0,};

int fibo(int n)
{
  if (n<=2)
    return 1;
  if (fiboData[n]==0)
    fiboData[n] = fibo(n-1) + fibo(n-2); // Memoization
  return fiboData[n];
}

👉 그리디 알고리즘과의 차이
하지만 동적 계획법은 모든 방법을 검토해 보고 결과적으로 효율적인 값을 택합니다.
그런 면에서 동적 계획법은 그리디 알고리즘에 비해 시간이 오래 걸리지만, 결과적으로는 항상 최적의 해를 구할 수 있다는 이점을 가지고 있습니다.

참고 https://velog.io/@boyeon_jeong/동적계획법Dynamic-Programming
https://velog.io/@chelsea/1-동적-계획법Dynamic-Programming-DP

